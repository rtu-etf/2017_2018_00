Python 2.7.6 (default, Oct 26 2016, 20:30:19) 
[GCC 4.8.4] on linux2
Type "copyright", "credits" or "license()" for more information.
>>> ================================ RESTART ================================
>>> 
>>> ================================ RESTART ================================
>>> 
Turpinājums, ja sakne tomēr ir:
>>> ================================ RESTART ================================
>>> 
[1.57,3.10] intervālā saknes nav vai ir pāru sakņu skaits
>>> ================================ RESTART ================================
>>> 
[1.57,3.10] intervālā saknes nav vai ir pāru sakņu skaits
>>> ================================ RESTART ================================
>>> 
[1.57,3.10] intervālā saknes nav vai ir pāru sakņu skaits
Turpinājums, ja sakne tomēr ir:
>>> ================================ RESTART ================================
>>> 
Turpinājums, ja sakne tomēr ir:
>>> ================================ RESTART ================================
>>> 
[1.57,3.10] intervālā saknes nav vai ir pāru sakņu skaits
>>> ================================ RESTART ================================
>>> 
[1.57,3.10] intervālā saknes nav vai ir pāru sakņu skaits
Turpinājums, ja sakne tomēr ir:
>>> ================================ RESTART ================================
>>> 
Turpinājums, ja sakne tomēr ir:
  1.: a=1.57000 f(3.14000)= 0.00159 b=4.71000
  2.: a=3.14000 f(3.92500)=-0.70570 b=4.71000
  3.: a=3.14000 f(3.53250)=-0.38103 b=3.92500
  4.: a=3.14000 f(3.33625)=-0.19343 b=3.53250
  5.: a=3.14000 f(3.23813)=-0.09638 b=3.33625
  6.: a=3.14000 f(3.18906)=-0.04745 b=3.23813
  7.: a=3.14000 f(3.16453)=-0.02294 b=3.18906
  8.: a=3.14000 f(3.15227)=-0.01067 b=3.16453
  9.: a=3.14000 f(3.14613)=-0.00454 b=3.15227
 10.: a=3.14000 f(3.14307)=-0.00147 b=3.14613
 11.: a=3.14000 f(3.14153)= 0.00006 b=3.14307
 12.: a=3.14153 f(3.14230)=-0.00071 b=3.14307
Gala rezultāts:
a=3.14153 f(a)=0.00006 x=3.14230 f(x)=-0.00071 b=3.14230 f(b)=-0.00071
Rezultāts ir sasniegts 12 iterācijās
>>> ================================ RESTART ================================
>>> 
Turpinājums, ja sakne tomēr ir:
  1.: a=1.57000 f(3.14000)= 0.00159 b=4.71000
  2.: a=3.14000 f(3.92500)=-0.70570 b=4.71000
  3.: a=3.14000 f(3.53250)=-0.38103 b=3.92500
  4.: a=3.14000 f(3.33625)=-0.19343 b=3.53250
  5.: a=3.14000 f(3.23813)=-0.09638 b=3.33625
  6.: a=3.14000 f(3.18906)=-0.04745 b=3.23813
  7.: a=3.14000 f(3.16453)=-0.02294 b=3.18906
  8.: a=3.14000 f(3.15227)=-0.01067 b=3.16453
  9.: a=3.14000 f(3.14613)=-0.00454 b=3.15227
 10.: a=3.14000 f(3.14307)=-0.00147 b=3.14613
 11.: a=3.14000 f(3.14153)= 0.00006 b=3.14307
 12.: a=3.14153 f(3.14230)=-0.00071 b=3.14307
 13.: a=3.14153 f(3.14192)=-0.00032 b=3.14230
 14.: a=3.14153 f(3.14172)=-0.00013 b=3.14192
 15.: a=3.14153 f(3.14163)=-0.00004 b=3.14172
 16.: a=3.14153 f(3.14158)= 0.00001 b=3.14163
 17.: a=3.14158 f(3.14161)=-0.00001 b=3.14163
 18.: a=3.14158 f(3.14159)=-0.00000 b=3.14161
 19.: a=3.14158 f(3.14159)= 0.00001 b=3.14159
Gala rezultāts:
a=3.14159 f(a)=0.00001 x=3.14159 f(x)=0.00001 b=3.14159 f(b)=-0.00000
Rezultāts ir sasniegts 19 iterācijās
>>> 14153 f(3.14163)=-0.00004 b=3.14172
 16.: a=3.14153 f(3.14158)= 0.00001 b=3.14163
 17.: a=3.14158 f(3.14161)=-0.00001 b=3.14163
 18.: a=3.14158 f(3.14159)=-0.00000 b=3.14161
 19.: a=3.14158 f(3.14159)= 0.00001 b=3.14159
 
SyntaxError: invalid syntax
>>> a
3.141587104797364
>>> b
3.141593093872071
>>> b-a
5.989074706835851e-06
>>> ================================ RESTART ================================
>>> 
0.247403959255
0.247403959255
Turpinājums, ja sakne tomēr ir:
  1.: a=1.57000 f(3.14000)= 0.00159 b=4.71000
  2.: a=3.14000 f(3.92500)=-0.70570 b=4.71000
  3.: a=3.14000 f(3.53250)=-0.38103 b=3.92500
  4.: a=3.14000 f(3.33625)=-0.19343 b=3.53250
  5.: a=3.14000 f(3.23813)=-0.09638 b=3.33625
  6.: a=3.14000 f(3.18906)=-0.04745 b=3.23813
  7.: a=3.14000 f(3.16453)=-0.02294 b=3.18906
  8.: a=3.14000 f(3.15227)=-0.01067 b=3.16453
  9.: a=3.14000 f(3.14613)=-0.00454 b=3.15227
 10.: a=3.14000 f(3.14307)=-0.00147 b=3.14613
 11.: a=3.14000 f(3.14153)= 0.00006 b=3.14307
 12.: a=3.14153 f(3.14230)=-0.00071 b=3.14307
 13.: a=3.14153 f(3.14192)=-0.00032 b=3.14230
 14.: a=3.14153 f(3.14172)=-0.00013 b=3.14192
 15.: a=3.14153 f(3.14163)=-0.00004 b=3.14172
 16.: a=3.14153 f(3.14158)= 0.00001 b=3.14163
 17.: a=3.14158 f(3.14161)=-0.00001 b=3.14163
 18.: a=3.14158 f(3.14159)=-0.00000 b=3.14161
 19.: a=3.14158 f(3.14159)= 0.00001 b=3.14159
Gala rezultāts:
a=3.14159 f(a)=0.00001 x=3.14159 f(x)=0.00001 b=3.14159 f(b)=-0.00000
Rezultāts ir sasniegts 19 iterācijās
>>> ================================ RESTART ================================
>>> 
0.247403959255

Traceback (most recent call last):
  File "/home/user/2017_2018_00/PYTHON/dichotomy_C04.py", line 17, in <module>
    print np.j0(0.25)
AttributeError: 'module' object has no attribute 'j0'
>>> from scipy.special import j1
>>> print j1(0.89)
0.402369858653
>>> ================================ RESTART ================================
>>> 
>>> ================================ RESTART ================================
>>> 
>>> vars()
{'a': 1.57, 'plt': <module 'matplotlib.pyplot' from '/usr/lib/pymodules/python2.7/matplotlib/pyplot.pyc'>, '__builtins__': <module '__builtin__' (built-in)>, '__file__': '/home/user/2017_2018_00/PYTHON/derivative_C04.py', '__package__': None, 'mans_sinuss': <function mans_sinuss at 0x7f542b3265f0>, 'y': array([ 0.99999968,  0.87796406,  0.54097222,  0.07153151, -0.41542261,
       -0.80066678, -0.98987981]), 'b': 4.71, 'x': array([ 1.57,  2.07,  2.57,  3.07,  3.57,  4.07,  4.57]), 'np': <module 'numpy' from '/usr/lib/python2.7/dist-packages/numpy/__init__.pyc'>, '__name__': '__main__', '__doc__': None}
>>> x
array([ 1.57,  2.07,  2.57,  3.07,  3.57,  4.07,  4.57])
>>> type(x)
<type 'numpy.ndarray'>
>>> len(x)
7
>>> x[0]
1.5700000000000001
>>> x[1]
2.0700000000000003
>>> x[2]
2.5700000000000003
>>> i = 5
>>> x[i]
4.0700000000000012
>>> x[0] = 100
>>> x
array([ 100.  ,    2.07,    2.57,    3.07,    3.57,    4.07,    4.57])
>>> print range.__doc__
range(stop) -> list of integers
range(start, stop[, step]) -> list of integers

Return a list containing an arithmetic progression of integers.
range(i, j) returns [i, i+1, i+2, ..., j-1]; start (!) defaults to 0.
When step is given, it specifies the increment (or decrement).
For example, range(4) returns [0, 1, 2, 3].  The end point is omitted!
These are exactly the valid indices for a list of 4 elements.
>>> range(4)
[0, 1, 2, 3]
>>> range(5)
[0, 1, 2, 3, 4]
>>> range(3,10)
[3, 4, 5, 6, 7, 8, 9]
>>> range(3,10,3)
[3, 6, 9]
>>> ================================ RESTART ================================
>>> 
0
1
2
3
4
5
6
>>> ================================ RESTART ================================
>>> 
0 1.57
1 2.07
2 2.57
3 3.07
4 3.57
5 4.07
6 4.57
>>> ================================ RESTART ================================
>>> 
0 1.57 0.999999682932
1 2.07 0.877964062999
2 2.57 0.540972220377
3 3.07 0.0715315111408
4 3.57 -0.415422606771
5 4.07 -0.800666782176
6 4.57 -0.989879805074
>>> ================================ RESTART ================================
>>> 
0 1.57 0.999999682932 -0.244071239866
1 2.07 0.877964062999 -0.673983685244
2 2.57 0.540972220377 -0.938881418472
3 3.07 0.0715315111408 -0.973908235824
4 3.57 -0.415422606771 -0.770488350809
5 4.07 -0.800666782176 -0.378426045795
6 4.57 -0.989879805074

Traceback (most recent call last):
  File "/home/user/2017_2018_00/PYTHON/derivative_C04.py", line 27, in <module>
    delta_x = x[i+1]-x[i]
IndexError: index out of bounds
>>> y[7]

Traceback (most recent call last):
  File "<pyshell#22>", line 1, in <module>
    y[7]
IndexError: index out of bounds
>>> ================================ RESTART ================================
>>> 
0 1.57 0.999999682932 -0.244071239866
1 2.07 0.877964062999 -0.673983685244
2 2.57 0.540972220377 -0.938881418472
3 3.07 0.0715315111408 -0.973908235824
4 3.57 -0.415422606771 -0.770488350809
5 4.07 -0.800666782176 -0.378426045795
>>> ================================ RESTART ================================
>>> 
0 1.57 0.999999682932 -0.244071239866
1 2.07 0.877964062999 -0.673983685244
2 2.57 0.540972220377 -0.938881418472
3 3.07 0.0715315111408 -0.973908235824
4 3.57 -0.415422606771 -0.770488350809
5 4.07 -0.800666782176 -0.378426045795
>>> a_diskreets_mainiigais = 1
>>> type(a_diskreets_mainiigais)
<type 'int'>
>>> a_diskreets_mainiigais
1
>>> a_diskreets_mainiigais = 10
>>> type(a_diskreets_mainiigais)
<type 'int'>
>>> a_diskreets_mainiigais
10
>>> a_array = []
>>> type(a_array)
<type 'list'>
>>> a_array
[]
>>> a_array.append(1)
>>> a_array
[1]
>>> a_array.append(20)
>>> a_array
[1, 20]
>>> a_array.append(300)
>>> a_array
[1, 20, 300]
>>> type(a_array)
<type 'list'>
>>> y_prim
[-0.24407123986551393, -0.67398368524417962, -0.93888141847228956, -0.97390823582417929, -0.77048835080914191, -0.37842604579537253]
>>> ================================ RESTART ================================
>>> 
0 1.57 0.999999682932 -0.244071239866
1 2.07 0.877964062999 -0.673983685244
2 2.57 0.540972220377 -0.938881418472
3 3.07 0.0715315111408 -0.973908235824
4 3.57 -0.415422606771 -0.770488350809
5 4.07 -0.800666782176 -0.378426045795

Traceback (most recent call last):
  File "/home/user/2017_2018_00/PYTHON/derivative_C04.py", line 35, in <module>
    plt.plot(x,y_prim,'rv')
  File "/usr/lib/pymodules/python2.7/matplotlib/pyplot.py", line 2987, in plot
    ret = ax.plot(*args, **kwargs)
  File "/usr/lib/pymodules/python2.7/matplotlib/axes.py", line 4137, in plot
    for line in self._get_lines(*args, **kwargs):
  File "/usr/lib/pymodules/python2.7/matplotlib/axes.py", line 317, in _grab_next_args
    for seg in self._plot_args(remaining, kwargs):
  File "/usr/lib/pymodules/python2.7/matplotlib/axes.py", line 295, in _plot_args
    x, y = self._xy_from_xy(x, y)
  File "/usr/lib/pymodules/python2.7/matplotlib/axes.py", line 237, in _xy_from_xy
    raise ValueError("x and y must have same first dimension")
ValueError: x and y must have same first dimension
>>> x
array([ 1.57,  2.07,  2.57,  3.07,  3.57,  4.07,  4.57])
>>> y_prim
[-0.24407123986551393, -0.67398368524417962, -0.93888141847228956, -0.97390823582417929, -0.77048835080914191, -0.37842604579537253]
>>> len(x)
7
>>> len(y_prim)
6
>>> ================================ RESTART ================================
>>> 
0 1.57 0.999999682932 -0.244071239866
1 2.07 0.877964062999 -0.673983685244
2 2.57 0.540972220377 -0.938881418472
3 3.07 0.0715315111408 -0.973908235824
4 3.57 -0.415422606771 -0.770488350809
5 4.07 -0.800666782176 -0.378426045795
>>> ================================ RESTART ================================
>>> 
0 0.0 0.0 0.999583385414
1 0.05 0.0499791692707 0.997084947523
2 0.1 0.0998334166468 0.992094316535
3 0.15 0.149438132474 0.984623966429
4 0.2 0.198669330795 0.974692569189
5 0.25 0.247403959255 0.962324948136
6 0.3 0.295520206661 0.947552015882
7 0.35 0.342897807455 0.930410697064
8 0.4 0.389418342309 0.910943836052
9 0.45 0.434965534111 0.889200089859
10 0.5 0.479425538604 0.865233806529
11 0.55 0.522687228931 0.839104889288
12 0.6 0.564642473395 0.81087864682
13 0.65 0.605186405736 0.780625630033
14 0.7 0.644217687238 0.748421455713
15 0.75 0.681638760023 0.714346617524
16 0.8 0.7173560909 0.678486284815
17 0.85 0.75128040514 0.640930089744
18 0.9 0.783326909627 0.601771903238
19 0.95 0.813415504789 0.56110960037
20 1.0 0.841470984808 0.519044815722
21 1.05 0.867423225594 0.475682689348
22 1.1 0.891207360061 0.431131603982
23 1.15 0.912763940261 0.385502914134
24 1.2 0.932039085967 0.338910667767
25 1.25 0.948984619356 0.291471321232
26 1.3 0.963558185417 0.243303448189
27 1.35 0.975723357827 0.194527443236
28 1.4 0.985449729988 0.145265220983
29 1.45 0.992712991038 0.0956399113293
30 1.5 0.997494986604 0.045775551706
31 1.55 0.999783764189 -0.00420322295704
32 1.6 0.999573603042 -0.0541714917517
33 1.65 0.996865028454 -0.104004360029
34 1.7 0.991664810452 -0.153577271571
35 1.75 0.983985946874 -0.202766319915
36 1.8 0.973847630878 -0.251448558058
37 1.85 0.961275202975 -0.299502305758
38 1.9 0.946300087687 -0.346807453671
39 1.95 0.928959715004 -0.393245763564
40 2.0 0.909297426826 -0.438701163846
41 2.05 0.887362368633 -0.48306003969
42 2.1 0.863209366649 -0.526211517008
43 2.15 0.836898790798 -0.568047739578
44 2.2 0.80849640382 -0.608464138633
45 2.25 0.778073196888 -0.647359694224
46 2.3 0.745705212177 -0.684637187718
47 2.35 0.711473352791 -0.720203444794
48 2.4 0.675463180551 -0.753969568333
49 2.45 0.637764702135 -0.785851160611
50 2.5 0.598472144104 -0.815768534251
51 2.55 0.557683717391 -0.843646911399
52 2.6 0.515501371821 -0.869416610632
53 2.65 0.47203054129 -0.893013221121
54 2.7 0.427379880234 -0.91437776363
55 2.75 0.381660992052 -0.933456837929
56 2.8 0.334988150156 -0.950202756267
57 2.85 0.287478012343 -0.964573662571
58 2.9 0.239249329214 -0.976533637059
59 2.95 0.190422647361 -0.986052786023
60 3.0 0.14112000806 -0.993107316549
61 3.05 0.0914646422324 -0.997679595983
62 3.1 0.0415806624333 -0.999758196009
63 3.15 -0.00840724736715 -0.999337921209
64 3.2 -0.0583741434276 -0.996419822051
65 3.25 -0.10819513453 -0.991011192263
66 3.3 -0.157745694143 -0.983125550603
67 3.35 -0.206901971673 -0.972782607069
68 3.4 -0.255541102027 -0.960008213632
69 3.45 -0.303541512708 -0.944834299624
70 3.5 -0.35078322769 -0.927298791927
71 3.55 -0.397148167286 -0.907445520178
72 3.6 -0.442520443295 -0.885324107217
73 3.65 -0.486786648656 -0.860989845056
74 3.7 -0.529836140908 -0.834503556677
75 3.75 -0.571561318742 -0.805931444008
76 3.8 -0.611857890943 -0.775344922449
77 3.85 -0.650625137065 -0.742820442376
78 3.9 -0.687766159184 -0.708439298051
79 3.95 -0.723188124087 -0.672287424428
80 4.0 -0.756802495308 -0.634455182365
81 4.05 -0.788525254426 -0.595037132764
82 4.1 -0.818277111064 -0.554131800221
83 4.15 -0.845983701075 -0.511841426763
84 4.2 -0.871575772414 -0.4682717163
85 4.25 -0.894989358229 -0.423531570417
86 4.3 -0.916165936749 -0.37773281618
87 4.35 -0.935052577558 -0.330989926621
88 4.4 -0.95160207389 -0.283419734622
89 4.45 -0.965773060621 -0.235141140889
90 4.5 -0.977530117665 -0.186274816763
91 4.55 -0.986843858503 -0.136942902605
92 4.6 -0.993691003633 -0.0872687025083
93 4.65 -0.998054438759 -0.0373763761045
94 4.7 -0.999923257564 0.0126093717746
95 4.75 -0.999292788975 0.0625636027907
96 4.8 -0.996164608836 0.112361457383
97 4.85 -0.990546535967 0.161878466848
98 4.9 -0.982452612624 0.21099086445
99 4.95 -0.971903069402 0.259575894774
100 5.0 -0.958924274663 0.307512120545
101 5.05 -0.943548668636 0.354679726163
102 5.1 -0.925814682328 0.400960817181
103 5.15 -0.905766641469 0.446239714971
104 5.2 -0.88345465572 0.490403245871
105 5.25 -0.858934493427 0.533341024054
106 5.3 -0.832267442224 0.574945727435
107 5.35 -0.803520155852 0.615113365923
108 5.4 -0.772764487556 0.653743541342
109 5.45 -0.740077310489 0.69073969837
110 5.5 -0.70554032557 0.726009365883
111 5.55 -0.669239857276 0.759464388079
112 5.6 -0.631266637872 0.791021144826
113 5.65 -0.591715580631 0.820600760667
114 5.7 -0.550685542598 0.848129301968
115 5.75 -0.508279077499 0.87353796171
116 5.8 -0.464602179414 0.896763231478
117 5.85 -0.41976401784 0.917747060192
118 5.9 -0.37387666483 0.93643699921
119 5.95 -0.32705481487 0.952786333416
120 6.0 -0.279415498199 0.966754197991
121 6.05 -0.231077788299 0.978305680546
122 6.1 -0.182162504272 0.987411908392
123 6.15 -0.132791908853 0.9940501207
124 6.2 -0.0830894028175 0.998203725399
125 6.25 -0.0331792165476 0.999862340638
126 6.3 0.0168139004844 0.999021820744
127 6.35 0.0667649915215 0.995684266579
128 6.4 0.11654920485 0.989858020289
129 6.45 0.166042105865 0.981557644457
130 6.5 0.215119988088 0.970803885699
131 6.55 0.263660182373 0.957623622812
132 6.6 0.311541363513 0.942049799588
133 6.65 0.358643853493 0.924121342476
134 6.7 0.404849920617 0.903883063281
135 6.75 0.450044073781 0.88138554716
136 6.8 0.494113351139 0.856685026188
137 6.85 0.536947602448 0.829843238804
138 6.9 0.578439764388 0.800927275497
139 6.95 0.618486128163 0.770009411115
140 7.0 0.656986598719 0.73716692422
141 7.05 0.69384494493 0.702481903922
142 7.1 0.728969040126 0.66604104471
143 7.15 0.762271092361 0.627935429755
144 7.2 0.793667863849 0.588260303247
145 7.25 0.823080879011 0.547114832342
146 7.3 0.850436620629 0.504601859286
147 7.35 0.875666713593 0.460827644375
148 7.4 0.898708095812 0.415901600347
149 7.45 0.919503175829 0.369936018916
150 7.5 0.937999976775 0.323045790096
151 7.55 0.95415226628 0.275348115039
152 7.6 0.967919672031 0.226962213094
153 7.65 0.979267782686 0.178009023816
154 7.7 0.988168233877 0.128610904683
155 7.75 0.994598779111 0.0788913252693
156 7.8 0.998543345375 0.0289745586255
157 7.85 0.999992073306 -0.021014629323
158 7.9 0.99894134184 -0.0709512916431
159 7.95 0.995393777258 -0.120710612684
160 8.0 0.989358246623 -0.17016822006
161 8.05 0.98084983562 -0.219200495506
162 8.1 0.969889810845 -0.267684883872
163 8.15 0.956505566652 -0.315500199435
164 8.2 0.94073055668 -0.362526928808
165 8.25 0.922604210239 -0.408647529661
166 8.3 0.902171833756 -0.453746724509
167 8.35 0.879484497531 -0.497711788853
168 8.4 0.854598908088 -0.540432832924
169 8.45 0.827577266442 -0.58180307637
170 8.5 0.798487112623 -0.621719115119
171 8.55 0.767401156867 -0.660081179868
172 8.6 0.734397097874 -0.696793385428
173 8.65 0.699557428603 -0.731763970409
174 8.7 0.662969230082 -0.76490552656
175 8.75 0.624723953754 -0.796135217247
176 8.8 0.584917192892 -0.825374984515
177 8.85 0.543648443666 -0.852551744162
178 8.9 0.501020856458 -0.877597568455
179 8.95 0.457140978035 -0.90044985587
180 9.0 0.412118485242 -0.921051487585
181 9.05 0.366065910863 -0.939350970263
182 9.1 0.319098362349 -0.955302564715
183 9.15 0.271333234114 -0.968866400269
184 9.2 0.2228899141 -0.980008574397
185 9.25 0.17388948538 -0.988701237466
186 9.3 0.124454423507 -0.994922662349
187 9.35 0.0747082903896 -0.998657298724
>>> ================================ RESTART ================================
>>> 

>>> ================================ RESTART ================================
>>> 
>>> for i in range(10):
	print i

	
0
1
2
3
4
5
6
7
8
9
>>> for i in range(10):
	print i, i*i

	
0 0
1 1
2 4
3 9
4 16
5 25
6 36
7 49
8 64
9 81
>>> n = 99
>>> for i in range(n,n+10):
	print i, i*i

	
99 9801
100 10000
101 10201
102 10404
103 10609
104 10816
105 11025
106 11236
107 11449
108 11664
>>> 
